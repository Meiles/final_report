{"version":3,"sources":["TXWES.png","logo.svg","Output/Output.js","Output/Introduction.js","Output/DesignImplementation.js","Output/Conclusion.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","output","props","react_default","a","createElement","className","onchange","changed","introduction","design","conclusion","App","state","showObjects","toggleObjectsHandler","doesShow","_this","setState","style","borderRadius","backgroundColor","font","border","padding","src","txwes","alt","onClick","this","Output_Output","Introduction","DesignImplementation","Conclusion","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6381ab98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TXWES.22482b85.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Output.css';\n\n\n\n\nconst output = (props) => {\n    return (\n            <div className=\"Output\" onchange={props.changed}>\n            <h1>FastChart</h1>\n            <ul>\n                <li>Miles Cruz</li>\n                <li>Spring 2019</li>\n            </ul>\n                    <p>\n\n            \n            This application was to be tentatively titled \"HealthTracker\". Later in development it was changed to \"FastChart\" which reflected it's new aim towards front-facing healthcare professionals.\n            This application will be used to download the user's FHIR records from supported healthcare institutions. \n            The system then updates the records in the background on a scheduled basis. \n            The user will have to consent to give out clinical data however, test data will be used in preliminary testing. \n            With more updates, the possibility of integrating an iWatch app to compare real-time data pulled from the FHIR records could be used to better track a person's state based on their medical history. \n            The application will be primarily developed using the Xcode IDE on the Mac OSX operating system. \n            This application will be an iOS app utilizing the swift programming language as its source. \n            The structure of the presentation will be orally based, with a simulation of the app running to show the application when in use on the iOS framework. \n            I will put together a short video showing a short synopsis of how the app was made as well.\n        </p>\n\n            </div>\n\n        )\n\n\n};\n\nexport default output;","import React from 'react';\n\n\nconst introduction = (props) => {\n    return (\n            <div className=\"introduction\" onchange={props.changed}>\n    \n        <p>\n        At first, I wanted the ability to update your healthcare data in realtime with some kind of external monitor,\n        either the Apple iWatch or newer models of fitbit. As I learned more about the different ways to retrieve healthcare data,\n        I found that there were many different ways to perform the retrieval of medical data already on the market.\n        However, I also saw that because there were so many different ways to connect to Electronic Health Resources\n        and many ways that couldn't connect to each other. While looking around, I found the HL7Â® website which pointed me towards\n        the FHIR or Fast Healthcare Interoperability Resources.\n        </p>time.\n\n            </div>\n\n        )\n\n\n};\n\nexport default introduction;","import React from 'react';\n\n\n\nconst design = (props) => {\n    return (\n            <div className=\"design\" onchange={props.changed}>\n            <h1>FastChart</h1>\n            <ul>\n                <li>Miles Cruz</li>\n                <li>Spring 2019</li>\n            </ul>\n                    <p>\n\n            \n            This application was to be tentatively titled \"HealthTracker\". Later in development it was changed to \"FastChart\" which reflected it's new aim towards front-facing healthcare professionals.\n            This application will be used to download the user's FHIR records from supported healthcare institutions. \n            The system then updates the records in the background on a scheduled basis. \n            The user will have to consent to give out clinical data however, test data will be used in preliminary testing. \n            With more updates, the possibility of integrating an iWatch app to compare real-time data pulled from the FHIR records could be used to better track a person's state based on their medical history. \n            The application will be primarily developed using the Xcode IDE on the Mac OSX operating system. \n            This application will be an iOS app utilizing the swift programming language as its source. \n            The structure of the presentation will be orally based, with a simulation of the app running to show the application when in use on the iOS framework. \n            I will put together a short video showing a short synopsis of how the app was made as well.\n        </p>\n\n            </div>\n\n        )\n\n\n};\n\nexport default design;","import React from 'react';\n\n\nconst conclusion = (props) => {\n    return (\n            <div className=\"conclusion\" onchange={props.changed}>\n            <h1>FastChart</h1>\n            <ul>\n                <li>Miles Cruz</li>\n                <li>Spring 2019</li>\n            </ul>\n                    <p>\n\n            \n            This application was to be tentatively titled \"HealthTracker\". Later in development it was changed to \"FastChart\" which reflected it's new aim towards front-facing healthcare professionals.\n            This application will be used to download the user's FHIR records from supported healthcare institutions. \n            The system then updates the records in the background on a scheduled basis. \n            The user will have to consent to give out clinical data however, test data will be used in preliminary testing. \n            With more updates, the possibility of integrating an iWatch app to compare real-time data pulled from the FHIR records could be used to better track a person's state based on their medical history. \n            The application will be primarily developed using the Xcode IDE on the Mac OSX operating system. \n            This application will be an iOS app utilizing the swift programming language as its source. \n            The structure of the presentation will be orally based, with a simulation of the app running to show the application when in use on the iOS framework. \n            I will put together a short video showing a short synopsis of how the app was made as well.\n        </p>\n\n            </div>\n\n        )\n\n\n};\n\nexport default conclusion;","import React, { Component } from 'react';\nimport Output from './Output/Output.js';\nimport Introduction from './Output/Introduction.js';\nimport Design from './Output/DesignImplementation.js';\nimport Conclusion from './Output/Conclusion.js'\nimport logo from './logo.svg';\nimport txwes from './TXWES.png';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n\n    showObjects: false\n  }\n\n\n\n\ntoggleObjectsHandler = () => {\n  const doesShow = this.state.showObjects;\n  this.setState({showObjects: !doesShow});\n}\n\n\n  render() {\n\n    const style = {\n      borderRadius: 5,\n      backgroundColor: 'blue',\n      font: 'inherit',\n      border: '3x solid gold',\n      padding: '4px'\n\n    };\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={txwes} className=\"App-logo\" alt=\"logo\" />\n        <br/>\n        <br/>\n        <br/>\n\n        <button\n        style={style} \n        onClick={this.toggleObjectsHandler}>Summary</button> { \n          this.state.showObjects === true ? \n          <div>\n        <Output/>\n          </div> : null\n        }\n\n        <button\n        style={style} \n        onClick={this.toggleObjectsHandler}>Introduction</button> { \n          this.state.showObjects === true ? \n          <div>\n        <Introduction/>\n          </div> : null\n        }\n\n        <button\n        style={style} \n        onClick={this.toggleObjectsHandler}>Design and Implementation</button> { \n          this.state.showObjects === true ? \n          <div>\n        <Design/>\n          </div> : null\n        }\n\n        <button\n        style={style} \n        onClick={this.toggleObjectsHandler}>Testing, Conclusions, and Future Work</button> { \n          this.state.showObjects === true ? \n          <div>\n        <Conclusion/>\n          </div> : null\n        }\n\n\n\n        <a\n          className=\"App-link\"\n          href=\"https://meiles.github.io/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Back to Hub\n        </a>\n      </header>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}